AWSTemplateFormatVersion: '2010-09-09'
Transform: 
- AWS::Serverless-2016-10-31
Description: >
  sam-app
  Sample SAM Template for sam-app
  
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Automated-Support-Ticket-Moderator
    Description: This application analyses Zendesk tickets for negative sentiment, tags them as 'negative' and applies a customizable escalation time frame.
    Author: Benjamin Smith
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['zendesk', 'moderation', 'sentiment', 'lambda','event Bridge','step functions']
    HomePageUrl: https://github.com/aws-samples/severless-ticket-sentiment-analysys-and-automated-escalation
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/aws-samples/severless-ticket-sentiment-analysys-and-automated-escalation/tree/1.0.0

  
##########################################################################
#  Code Star Params                                                      #
##########################################################################
Parameters:
#   ProjectId:
#     Type: String
#     Description: AWS CodeStar projectID used to associate new resources to team members
#   CodeDeployRole:
#     Type: String
#     Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
##########################################################################
#  Lambda Environment Params: Zendesk Integration                        #
########################################################################## 
  ZenDeskUsernameKey:
    Description: Your agent username that will connect to the Zedesk API
    Type: String
    Default: ZenDeskUsername
  ZenDeskTokenKey:
    Description: Your API Token
    Type: String
    Default: ZenDeskToken
  ZenDeskDomainKey:
    Description: Your Unique Zendesk Domain name (excluding https:// and .com)
    Type: String
    Default: ZenDeskDomain
##########################################################################
#  Lambda Environment Params : Escalation times                          #
########################################################################## 
  SLAUrgentWait:
    Description: Urgent priority SLA wait time
    Type: String
    Default: 120
  SLAHighWait:
    Description: High priority SLA wait time
    Type: String
    Default: 120
  SLANormalWait:
    Description: Normal priority SLA wait time
    Type: String
    Default: 120
##########################################################################
#  Event Bridge  Params : source name and acct ID                        #
########################################################################## 
  EventSourceName:
    Description: The event source name generated by the Zendesk connector
    Type: String
    Default: ''



Globals:
  Function:
    AutoPublishAlias: live
Resources:
##########################################################################
#  Lambda Functions                                                      #
##########################################################################
    ZenDeskDemoGetFullTicket:
        Type: AWS::Serverless::Function # Function Resource: 
        Properties:
            CodeUri: lambdas/getFullTicket
            Handler: getFullTicket.handler
            Runtime: nodejs10.x
            Role:
                Fn::GetAtt:
                - DemoLambdaExecutionRole
                - Arn
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    ZenDeskUsername: !Ref ZenDeskUsernameKey
                    ZenDeskPassword: !Ref ZenDeskTokenKey
                    ZenDeskDomain: !Ref ZenDeskDomainKey
    ZenDeskDemoGetSentiment:
        Type: AWS::Serverless::Function # Function Resource: 
        Properties:
            CodeUri: lambdas/getSentiment
            Handler: getSentiment.handler
            Runtime: nodejs10.x
            Role:
                Fn::GetAtt:
                - DemoLambdaExecutionRole
                - Arn
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
    ZenDeskDemoSetTags:
        Type: AWS::Serverless::Function # Function Resource: 
        Properties:
            CodeUri: lambdas/setTags
            Handler: setTags.handler
            Runtime: nodejs10.x
            Role:
                Fn::GetAtt:
                - DemoLambdaExecutionRole
                - Arn
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    ZenDeskUsername: !Ref ZenDeskUsernameKey
                    ZenDeskPassword: !Ref ZenDeskTokenKey
                    ZenDeskDomain: !Ref ZenDeskDomainKey
    ZenDeskDemoSetPriority:
        Type: AWS::Serverless::Function # Function Resource: 
        Properties:
            CodeUri: lambdas/setPriority
            Handler: setPriority.handler
            Runtime: nodejs10.x
            Role:
                Fn::GetAtt:
                - DemoLambdaExecutionRole
                - Arn
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    ZenDeskUsername: !Ref ZenDeskUsernameKey
                    ZenDeskPassword: !Ref ZenDeskTokenKey
                    ZenDeskDomain: !Ref ZenDeskDomainKey                   
##########################################################################
#   STEP FUNCTION                                                        #
##########################################################################
    ZendDemoStateMachine:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        DefinitionString: !Sub |
                {
                   "Comment": "Understand the ticket sentiment, apply tags and check back when answered to ensure SLA's are met",
                   "StartAt": "FullTicketInfo",
                   "States": {

                      "FullTicketInfo": {
                       "Type" : "Task",
                       "Resource": "${ZenDeskDemoGetFullTicket.Arn}",
                       "InputPath":  "$.detail.ticket_event.ticket",
                       "ResultPath": "$",
                       "Next": "GetSentiment"
                     },

                     "GetSentiment": {
                       "Type": "Task",
                       "Resource": "${ZenDeskDemoGetSentiment.Arn}",
                       "InputPath": "$.raw_subject",
                       "ResultPath": "$.sentiment",
                       "OutputPath": "$",
                       "Next": "isNegative"
                     },

                     "isNegative": {
                       "Type" : "Choice",
                       "Choices": [
                         {
                           "Variable": "$.sentiment.Sentiment",
                           "StringEquals": "NEGATIVE",
                           "Next": "setTags"
                         }
                       ],
                       "Default": "ClosedOrNotNegative"
                     },
                     
                    
                 
                     "setTags": {
                       "Type" : "Task",
                       "Resource": "${ZenDeskDemoSetTags.Arn}",
                       "ResultPath": "$.tags",
                       "OutputPath": "$",
                       "Next": "isClosed"
                     },
                     
                     
                  "GetSLAWaitTime": {
                       "Type" : "Choice",
                       "Choices": [
                         {
                           "Variable": "$.priority",
                           "StringEquals": "normal",
                           "Next": "SLAHighWait"
                         },
                         {
                           "Variable": "$.priority",
                           "StringEquals": "high",
                           "Next": "SLAUrgentWait"
                         },
                         {
                           "Variable": "$.priority",
                           "StringEquals": "urgent",
                           "Next": "FinalEscalationState"
                         }
                       ],
                        "Default": "SLANormalWait"
                        
                     },
                     
                     
                    "FinalEscalationState": {
                            "Comment" : "Ticket cannot be escalated further",
                            "Type": "Succeed"
                        },
                     
                     "EscalatePriority": {
                         "Type" : "Task",
                         "Resource": "${ZenDeskDemoSetPriority.Arn}",
                         "InputPath":  "$",
                         "ResultPath": "$",
                         "Next": "isClosed"
                     },

                     "SLANormalWait": {
                         "Type": "Wait",
                         "Seconds": ${SLANormalWait},
                         "Next": "EscalatePriority"
                       },
                       
                       "SLAHighWait": {
                         "Type": "Wait",
                         "Seconds": ${SLAHighWait},
                         "Next": "EscalatePriority"
                       },
                       
                       
                       "SLAUrgentWait": {
                         "Type": "Wait",
                         "Seconds":${SLAUrgentWait},
                         "Next": "EscalatePriority"
                       },

                     "isClosed": {
                       "Type" : "Choice",
                       "Choices": [
                         {
                           "Variable": "$.status",
                           "StringEquals": "open",
                           "Next": "GetSLAWaitTime"
                         }
                       ],
                       "Default": "ClosedOrNotNegative"
                     },
                    
                     "ClosedOrNotNegative": {
                         "Type": "Pass",
                         "Result": {
                           "x-datum": 1,
                           "y-datum": 1
                         },
                         "ResultPath": "$.coords",
                         "End": true
                       }
                                           
                   }
                 }
        RoleArn: !GetAtt [ DemoStatesExecutionRole, Arn ]
        
##########################################################################
#   Roles                                                                #
##########################################################################   

    DemoLambdaExecutionRole:
        Description: Creating service role in IAM for AWS Lambda
        Type: AWS::IAM::Role
        Properties:
          RoleName: !Sub 'CodeStar-Execution${Stage}'
          AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ComprehendFullAccess'
    DemoStatesExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow" 
                Principal:
                  Service:
                    - !Sub states.${AWS::Region}.amazonaws.com
                Action: "sts:AssumeRole"
          Path: "/"
          Policies:
            - PolicyName: StatesExecutionPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - "lambda:InvokeFunction"
                      - "comprehend:DetectSentiment"
                    Resource: "*"
##########################################################################
#   EVENT  BRIDGE                                                        #
##########################################################################
    MyEventsRule:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: Events Rule with StepFunctionParams
        EventBusName: !Ref EventSourceName
        EventPattern:
          account:
            - !Ref "AWS::AccountId"
          detail-type:
            - 'Support Ticket: Comment Created'
        Targets:
          - 
            Arn: 
              Fn::GetAtt: 
              - ZendDemoStateMachine
              - Arn
            RoleArn:
              Fn::GetAtt:
                - DemoStatesExecutionRole
                - Arn
            Id: NewTicketSFN
      DependsOn:
        - ZendDemoStateMachine
        - DemoStatesExecutionRole
